---
# tasks file for rems-mediator
- name: Ensures rems dir exists
  file:
    path: /home/ubuntu/rems
    state: directory

- name: Ensures gen3 config dir exists
  file:
    path: "{{ gen3_user_config_file | dirname }}"
    state: directory

- name: Make sure gen3 user config file exists
  ansible.builtin.file:
    path: "{{ gen3_user_config_file }}"
    state: touch

- name: copy Docker Compose files
  synchronize:
    src: ../compose/
    dest: /home/ubuntu/rems/

- name: template rems config file
  template:
    src: gen3-rems-config.edn.j2
    dest: /home/ubuntu/rems/gen3-rems-config.edn

# use files parameter to use multiple docker-compose.yml files
- name: deploy Docker Compose stack
  docker_compose:
    project_src: /home/ubuntu/rems/
    restarted: yes
    files:
    - docker-compose.yml
  environment: "{{ _rems_environment }}"

- name: Run migration
  shell: docker-compose run --rm -e CMD="migrate" app
  args:
    chdir: /home/ubuntu/rems/
  environment: "{{ _rems_environment }}"

- name: Create API key
  shell: 'docker-compose run --rm -e CMD="api-key add {{ rems_admin_api_key }} admin_api_key" app'
  args:
    chdir: /home/ubuntu/rems/
  environment: "{{ _rems_environment }}"

- name: Register admin user
  shell: 'docker-compose run --rm -e CMD="api-key set-users {{ rems_admin_user }}" app'
  args:
    chdir: /home/ubuntu/rems/
  environment: "{{ _rems_environment }}"

- name: Make sure users are created
  shell: 'curl -H "x-rems-api-key: {{ rems_admin_api_key }}" -H "x-rems-user-id: {{ item.user }}" http://localhost:9000/api/catalogue'
  args:
    chdir: /home/ubuntu/rems/
  environment: "{{ _rems_environment }}"
  loop: "{{ rems_user_roles }}"

- name: Grant roles to desired users
  shell: 'docker-compose run --rm -e CMD="{% for item in rems_user_roles %}grant-role {{ item.role }} {{ item.user }};{% endfor %}" app'
  args:
    chdir: /home/ubuntu/rems/
  environment: "{{ _rems_environment }}"

- name: Import projects from gen3
  shell: 'docker-compose run --rm mediator python manage.py import_gen3_projects'
  args:
    chdir: /home/ubuntu/rems/
  environment: "{{ _rems_environment }}"
